1. создаем папку <<название проекта>>
    terminal: cd <<название проекта>>

2. внутри создаем еще две папки 'client' и 'server'
    terminal: /<<название проекта>> mkdir client server

3. создадим репозиторий внутри папки:
    terminal: git init
    3.1 если директория не пустая, необходимо добавить существующие файлы в контроль версий:
        git add --all
    3.2 зафиксируем изменения:
        git commit -m 'initiating of my project'
        
        
        СЕРВЕРНАЯ ЧАСТЬ:

1. Внутри папки server создаем файл 'index.js' с него будет начинаться запуск приложения

2. terminal: /server cd server

3. Проинициализируем проект
    terminal: /server npm init -y  

4. Устанавливаем зависимости: 
    4.1 express
    4.2 pg, модуль работы с postgres 
    4.3 cors, для того, чтобы обращаться из браузера к серверу - модуль  
    4.4 dotenv, чтобы задавать переменные окружения: 
    terminal: /server npm install express pg cors dotenv

    4.5 после установки все модули можно увидеть в поле dependencies файла package.json

5. Устанавливаем модуль nodemon для тестирования в ходе разработки (перезапуск сервера при изменении кода)
    terminal: /server npm install -D nodemon
    
    5.1 В packaje.json создаем скрипт запуска приложения (сервера) из файла index.js. 
    Для этого  в поле "scripts": вместо "test": "echo \"Error: no test specified\" && exit 1"
    пишем : "dev": nodemon index.js,

    5.2 Для запуска скрипта:
    terminal: /server npm run dev

6. Номера портов и другие переменные объявлять статично в коде - это плохая практика.
Создадим в папке server файл с переменными окружения '.env', в котором будет объявляться конфигурация приложения
    terminal: .server touch .env

7. В файле index.js: 
    7.1 Импортируем модуль 'express'
    7.2 Импортируем модуль 'dotenv', чтобы считывать переменные окружения из файла '.env'
    7.2 Задаем порт из файла с переменными окружения
    7.3 Создаем объект приложения 'app'

8. Создание базы данных
    8.1 Создание базы данных:
        terminal: psql --username=postgres --dbname=postgres
        postgres=# \l 
        postgres=# CREATE DATABASE <<название проекта>>
    8.2 В файле .env создаем следующие переменные:
        8.2.1 Имя БД
        8.2.2 Имя пользователя
        8.2.3 Пароль
        8.2.4 Хост
        8.2.5 Порт (по умолчанию 5432)
    8.3 Создаем файл db.js в корне
    terminal: /server touch db.js
        8.3.1 Импортируем модуль 'dotenv', чтобы считывать переменные окружения из файла '.env'
        8.3.2 Импортируем модуль pg
        8.3.3 Создаем пул (pool) подключений и указываем его параметры из файла с переменными окружения
        8.3.4 Экспортируем модуль
    8.4 Создаем в корне SQL файл: database.sql
    terminal: /server touch database.sql
        8.4 Создаем таблицы и связи в БД
        ...


9. Создаем папку controller - в ней будем работать с запросами. Внутри которой создадим файл user.controller.js. 
Созданные в нем методы класса покажут, что будет уметь наше приложение
    terminal: /server mkdir controller; touch controller/user.controller.js
    9.1 в файле user.controller создаем класс и прописываем ему асинхронные методы, нужные для работы приложения.
    Например: создать пользователя, запросить информацию о нем в БД, внести информацию в БД, изменить информацию в БД, удалить инфу
    9.2 Экспортируем объект созданного класса
   
10. Создаем папку routes - в ней будут маршруты по которым будем отправлять запросы. Внутри которой файл user.routes.js
    terminal: /server mkdir routes; touch routes/user.routes.js
    10.1 в файле user.controller импортируем модуль express.
    10.2 импортируем объект класса из user.controller.js

    Например: создать пользователя, запросить информацию о нем в БД, внести информацию в БД, изменить информацию в БД, удалить инфу
    10.2 Экспортируем класс

Импортируем базу данных в user.controller